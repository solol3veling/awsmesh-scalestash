import React from 'react';
import type { AWSService } from '../../../utils/serviceUtils';
import { getUniformServiceId } from '../../../utils/serviceUtils';

interface InfoModalProps {
  show: boolean;
  onClose: () => void;
  onDownloadReadme: () => void;
  services: AWSService[];
  theme: 'dark' | 'light';
}

const InfoModal: React.FC<InfoModalProps> = ({ show, onClose, onDownloadReadme, services, theme }) => {
  if (!show) return null;

  return (
    <div
      className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
      onClick={onClose}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        className={`max-w-4xl w-full max-h-[90vh] rounded-2xl shadow-2xl overflow-hidden ${
          theme === 'dark' ? 'bg-[#232f3e]' : 'bg-white'
        }`}
      >
        {/* Modal Header */}
        <div className={`px-6 py-4 border-b flex items-center justify-between ${
          theme === 'dark' ? 'border-gray-700' : 'border-gray-200'
        }`}>
          <h2 className={`text-xl font-bold ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>
            JSON Format Documentation
          </h2>
          <div className="flex items-center gap-2">
            {/* Download README button */}
            <button
              onClick={onDownloadReadme}
              className={`px-4 py-2 rounded-lg transition-all flex items-center gap-2 ${
                theme === 'dark'
                  ? 'bg-[#ff9900] hover:bg-[#ff9900]/90 text-white'
                  : 'bg-blue-600 hover:bg-blue-700 text-white'
              }`}
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                />
              </svg>
              <span className="text-sm font-medium">Download README</span>
            </button>
            <button
              onClick={onClose}
              className={`p-2 rounded-lg transition-colors ${
                theme === 'dark'
                  ? 'hover:bg-[#ff9900]/20 text-gray-400 hover:text-[#ff9900]'
                  : 'hover:bg-gray-100 text-gray-600'
              }`}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Modal Body - Scrollable */}
        <div className={`p-6 overflow-y-auto max-h-[calc(90vh-80px)] ${
          theme === 'dark' ? 'text-gray-300' : 'text-gray-700'
        }`}>
          <div className="space-y-6">
            {/* Introduction */}
            <div>
              <h3 className={`text-lg font-semibold mb-2 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                AI-Friendly JSON Format
              </h3>
              <p className="text-sm">
                Use this minimal JSON format to programmatically generate AWS architecture diagrams. The format only
                requires essential data - IDs, timestamps, and icons are automatically generated by the app. You can feed
                this structure to an AI or use it directly to create complex diagrams automatically.
              </p>
            </div>

            {/* Service ID Format */}
            <div>
              <h3 className={`text-lg font-semibold mb-2 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                Service Format
              </h3>
              <p className="text-sm mb-3">
                Each node requires a <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>service</code> field with this format:
              </p>
              <code className={`block px-4 py-2 rounded-lg text-sm ${
                theme === 'dark'
                  ? 'bg-[#1a252f] text-[#ff9900]'
                  : 'bg-gray-100 text-blue-600'
              }`}>
                arch::other::service-name
              </code>
              <p className="text-sm mt-2">
                Example: <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>
                  arch::other::amazon-ec2
                </code>
              </p>
              <p className="text-xs mt-2 font-semibold opacity-75">
                IMPORTANT: ALL services use "other" as the category
              </p>
              <p className="text-xs mt-2 opacity-75">
                Icons are automatically mapped from the service ID - no need to specify them!
              </p>
            </div>

            {/* Groups Section */}
            <div>
              <h3 className={`text-lg font-semibold mb-2 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                Groups (VPC, Subnets, etc.)
              </h3>
              <p className="text-sm mb-3">
                Groups are containers that can hold other AWS service nodes. Use them for VPCs, Subnets, or logical groupings.
              </p>

              <p className="text-sm font-semibold mb-2">Creating a Group Container:</p>
              <pre className={`p-3 rounded-lg text-xs mb-3 ${
                theme === 'dark'
                  ? 'bg-[#1a252f] text-gray-300'
                  : 'bg-gray-100 text-gray-800'
              }`}>
{`{
  "service": "group",
  "label": "VPC",
  "position": { "x": 0, "y": 0 },
  "group": "600::400::container::locked"
}`}
              </pre>

              <p className="text-sm font-semibold mb-2">Group Field Format:</p>
              <ul className="text-xs space-y-1 mb-3">
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"width::height::container"</code> - Unlocked group</li>
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"width::height::container::locked"</code> - Locked group (cannot be moved)</li>
              </ul>

              <p className="text-sm font-semibold mb-2">Adding Nodes Inside Groups:</p>
              <pre className={`p-3 rounded-lg text-xs mb-2 ${
                theme === 'dark'
                  ? 'bg-[#1a252f] text-gray-300'
                  : 'bg-gray-100 text-gray-800'
              }`}>
{`{
  "service": "arch::other::amazon-ec2",
  "label": "Web Server",
  "position": { "x": 50, "y": 50 },
  "group": "::::parent::0"
}`}
              </pre>
              <ul className="text-xs space-y-1">
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"::::parent::0"</code> - Makes node a child of node at index 0</li>
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"::::parent::vpc-1"</code> - Makes node a child of node with id "vpc-1"</li>
                <li>• Child positions are relative to parent's top-left corner</li>
              </ul>
            </div>

            {/* Available Services */}
            <div>
              <h3 className={`text-lg font-semibold mb-3 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                Available Services ({services.length} total)
              </h3>
              <p className="text-xs mb-3 opacity-75">
                All available AWS services with their uniform IDs. Use these in your JSON.
              </p>
              <div className={`max-h-64 overflow-y-auto rounded-lg border ${
                theme === 'dark' ? 'border-gray-700' : 'border-gray-200'
              }`}>
                <div className={`p-4 font-mono text-xs space-y-1 ${
                  theme === 'dark' ? 'bg-[#1a252f]' : 'bg-gray-50'
                }`}>
                  {services.map((service) => (
                    <div key={service.id} className="hover:bg-opacity-50">
                      {getUniformServiceId(service)}
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Connection Flow Patterns */}
            <div>
              <h3 className={`text-lg font-semibold mb-3 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                Connection Flow Patterns
              </h3>
              <p className="text-sm mb-3">
                Two ways to define connection flows between nodes:
              </p>
              <p className="text-sm font-semibold mb-2">
                <strong>Option 1: Semantic keywords</strong> (easiest for AI):
              </p>
              <ul className="text-xs space-y-1 mb-3">
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"horizontal"</code> - Right to left flow</li>
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"vertical"</code> - Top to bottom flow</li>
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"diagonal-down"</code>, <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"diagonal-up"</code> - Diagonal flows</li>
                <li>• <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"l-shape-down"</code>, <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"l-shape-up"</code> - L-shaped connections</li>
              </ul>
              <p className="text-sm font-semibold mb-2">
                <strong>Option 2: Custom format</strong> (precise control):
              </p>
              <ul className="text-xs space-y-1 mb-2">
                <li>• Full: <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"right::left::1::3"</code> = right-1 → left-3</li>
                <li>• Short: <code className={theme === 'dark' ? 'text-[#ff9900]' : 'text-blue-600'}>"right::left"</code> = right-2 → left-2 (uses middle handles)</li>
              </ul>
            </div>

            {/* JSON Example 1 */}
            <div>
              <h3 className={`text-lg font-semibold mb-3 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                Example 1: 3-Tier Architecture with VPC
              </h3>
              <p className="text-sm mb-2">Using groups and semantic flow keywords:</p>
              <pre className={`p-4 rounded-lg overflow-x-auto text-xs ${
                theme === 'dark'
                  ? 'bg-[#1a252f] text-gray-300'
                  : 'bg-gray-100 text-gray-800'
              }`}>
{`{
  "nodes": [
    {
      "service": "group",
      "label": "VPC",
      "position": { "x": 0, "y": 0 },
      "group": "600::400::container::locked"
    },
    {
      "service": "arch::other::amazon-ec2",
      "label": "Web Server",
      "position": { "x": 50, "y": 50 },
      "group": "::::parent::0"
    },
    {
      "service": "arch::other::amazon-ec2",
      "label": "App Server",
      "position": { "x": 50, "y": 150 },
      "group": "::::parent::0"
    },
    {
      "service": "arch::other::amazon-rds",
      "label": "Database",
      "position": { "x": 700, "y": 100 }
    }
  ],
  "connections": [
    {
      "source": 1,
      "target": 2,
      "flow": "vertical",
      "label": "forwards to"
    },
    {
      "source": 2,
      "target": 3,
      "flow": "horizontal",
      "label": "queries"
    }
  ]
}`}
              </pre>
            </div>

            {/* JSON Example 2 */}
            <div>
              <h3 className={`text-lg font-semibold mb-3 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                Example 2: Multiple Connections
              </h3>
              <p className="text-sm mb-2">Using custom handles for multiple connections from same node:</p>
              <pre className={`p-4 rounded-lg overflow-x-auto text-xs ${
                theme === 'dark'
                  ? 'bg-[#1a252f] text-gray-300'
                  : 'bg-gray-100 text-gray-800'
              }`}>
{`{
  "nodes": [
    {
      "service": "arch::other::amazon-ec2",
      "position": { "x": 100, "y": 200 },
      "label": "API Server"
    },
    {
      "service": "arch::other::amazon-rds",
      "position": { "x": 400, "y": 100 },
      "label": "User DB"
    },
    {
      "service": "arch::other::amazon-dynamodb",
      "position": { "x": 400, "y": 200 },
      "label": "Session DB"
    },
    {
      "service": "arch::other::amazon-simple-storage-service",
      "position": { "x": 400, "y": 300 },
      "label": "Media Storage"
    }
  ],
  "connections": [
    {
      "source": 0,
      "target": 1,
      "flow": "right::left::1::2",
      "label": "user queries"
    },
    {
      "source": 0,
      "target": 2,
      "flow": "right::left::2::2",
      "label": "session data"
    },
    {
      "source": 0,
      "target": 3,
      "flow": "right::left::3::2",
      "label": "media uploads"
    }
  ]
}`}
              </pre>
            </div>

            {/* Download Button */}
            <div className="pt-4 border-t border-gray-700">
              <button
                onClick={onDownloadReadme}
                className={`w-full px-6 py-3 rounded-lg font-medium transition-all flex items-center justify-center gap-2 ${
                  theme === 'dark'
                    ? 'bg-[#ff9900] hover:bg-[#ff9900]/90 text-white'
                    : 'bg-blue-600 hover:bg-blue-700 text-white'
                }`}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                  />
                </svg>
                Download Complete README for AI
              </button>
              <p className="text-xs text-center mt-2 opacity-75">
                Download the full README with all services, validation rules, and examples
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InfoModal;
